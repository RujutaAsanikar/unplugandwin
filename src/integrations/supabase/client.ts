
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pirovichrrmluhxcstpx.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBpcm92aWNocnJtbHVoeGNzdHB4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE2MTQ0NDMsImV4cCI6MjA1NzE5MDQ0M30.OFSLk7dZq_xqvVqrFSlLblNZ_EbRhq1zlBI2ejyQzew";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
    },
    global: {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
    },
    storage: {
      // Improve storage client defaults
      retryAttempts: 3,
      retryInterval: 1000
    }
  }
);

// Helper function to get a public URL with proper cache-busting
export const getPublicUrl = (bucketName: string, filePath: string) => {
  const { data } = supabase.storage.from(bucketName).getPublicUrl(filePath);
  const timestamp = Date.now();
  return `${data.publicUrl}?t=${timestamp}`;
};

// Helper function to check if a file exists in storage
export const fileExists = async (bucketName: string, filePath: string): Promise<boolean> => {
  try {
    const { data, error } = await supabase.storage.from(bucketName).download(filePath);
    return !error && !!data;
  } catch {
    return false;
  }
};
